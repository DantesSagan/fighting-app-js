<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fighting club-game-app</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
            font-family: 'Press Start 2P', cursive;
        }

        .flip {
            -moz-transform: scale(-1, 1);
            -webkit-transform: scale(-1, 1);
            -o-transform: scale(-1, 1);
            transform: scale(-1, 1);
            filter: FlipH;
        }

        #img-scale {
            background-color: blue;
            transform: scale(-1, 1);
        }

        .focus-div:focus {
            background-color: chocolate;
        }
    </style>
</head>

<body>
    <div style="display: none;" id="displayRu">
        <!-- interface of healthbar both players -->
        <div style="position:relative; display:inline-block;" id="app" class="">
            <!-- info about players healthbar and timer-->
            <div id="infoPlayersRu"
                style="position:absolute; display:none; flex-direction:row; width:100%; align-items:center; padding:50px;">

                <!-- player health -->
                <div style="position: relative; height:30px; width:100%;display:flex;">
                    <div style="position: absolute; color: white; height: 50px; bottom:40; left: 0; ">
                        <h1>
                            Игрок 1
                        </h1>
                    </div>
                    <div style="position: relative; height:30px; width:100%;display:flex; justify-content:flex-end;">
                        <div
                            style="background-color:red; text-align:center;height:30px; width: 100%; border: 2px solid white; border-radius: 15px;">
                            Игрок 1
                        </div>
                        <div id="playerHealth"
                            style="position: absolute; background-color:blue; top:0; right: 0; bottom: 0; width: 100%; border: 2px solid white; border-radius: 15px;">
                        </div>
                    </div>
                </div>

                <!-- timer -->
                <div
                    style="background-color:white; text-align:center; width:100px; flex-shrink: 0;text-align:center; display: flex; align-items:center; justify-content: center; border: 2px solid white; border-radius: 15px; ">
                    <!-- <h3>
                    Timer:
                </h3> -->
                    <br />
                    <h3 id="timer">
                    </h3>
                </div>

                <!-- player2 health -->
                <div style="position: relative; height:30px; width:100%;display:flex; ">
                    <div style="position: absolute; color: white; height: 50px; bottom:40; right: 0; ">
                        <h1>
                            Игрок 2
                        </h1>
                    </div>
                    <div style="position: relative; height:30px; width:100%;">
                        <div
                            style="background-color:red; text-align:center;height:30px; border: 2px solid white; border-radius: 15px;">
                            Игрок 2
                        </div>
                        <div id="player2Health"
                            style=" position: absolute; background-color:blue; top:0; right: 0; bottom: 0; left: 0; border: 2px solid white; border-radius: 15px;">
                        </div>
                    </div>
                </div>

            </div>

            <!-- Win label or lose label -->
            <h1 id="displayTextRu"
                style="position:absolute; color: white; width:100%; align-items:center; justify-content: center; top: 0; left:0; right:0;bottom: 100; display:none; ">
            </h1>


            <canvas></canvas>
        </div>

        <!-- menu with pucking heroes -->
        <div id="pickMenuRu"
            style=" position:absolute; color: black;  align-items:center; justify-content: center;display:none; flex-direction:column;width:768px; height:600px; top: 0; left:100; right:0;bottom: 0; margin-top:0px;">

            <div
                style="display:grid; grid-template-columns: repeat(2, minmax(0, 1fr)); width:100%; background-color:white; border-radius:15px; padding:5px;">
                <div id="parentColumnOne"
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr)); align-items:center; justify-content: center;text-align:center; margin-right:5px;">
                    <p style="font-size:small;">
                        Игрок 1
                    </p>
                    <!-- Hero list -->
                    <div class="focus-div" id="hero1Player1" onclick="PickMackPlayer1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Мэк</p>
                        <img src="/assets/samuraiMack/singleMack.png" alt="hero1" style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKingPlayer1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Король</p>
                        <img src="/assets/Medieval King Pack/singleKing.png" alt="hero2"
                            style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKenjiPlayer1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Кенджи</p>
                        <img src="/assets/kenji/singleKenjiReverse.png" alt="hero3" style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKing2Player1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Король - 2 </p>
                        <img src="/assets/Medieval King Pack 2/Sprites/King2 solo.png" alt="hero4"
                            style="width: 48px; height:48px;" />
                    </div>
                </div>
                <div
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr)); align-items:center; justify-content: center;text-align:center; margin-left:5px;">
                    <p style="font-size:small;">
                        Игрок 2
                    </p>
                    <!-- Hero list -->
                    <div onclick="PickMackPlayer2();" id="hero1Player2"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;"> Мэк</p>
                        <img src="/assets/samuraiMack/reverseMack/singleMackReverse.png" alt="hero1"
                            style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKingPlayer2();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Король</p>
                        <img src="/assets/Medieval King Pack/singleKingReverse.png" alt="hero2"
                            style="width: 48px; height:48px;" />
                    </div>
                    <div id="hero1Player2" onclick="PickKenjiPlayer2();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;"> Кеджи</p>
                        <img src="/assets/kenji/singleKenji.png" alt="hero1" style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKing2Player2();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Король - 2</p>
                        <img src="/assets/Medieval King Pack 2/Sprites/King2 solo Reverse.png" alt="hero4"
                            style="width: 48px; height:48px;" />
                    </div>
                </div>
            </div>
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px;  grid-column: span 3 / span 3;"
                onclick="TrueStart();">
                Играть
            </button>
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; padding: 5px; align-items:center; justify-content: center; grid-column: span 3 / span 3; "
                onclick="TrueBack();">
                Назад
            </button>

        </div>



        <!-- restart button -->
        <div id="restartRu"
            style="position:absolute; color: white;  align-items:center; justify-content: center; display:none; width: 610px; height:300px; top: 200; left:200; right:0;bottom: 0; ">
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; padding: 5px;"
                onclick="TrueRestart();">
                Перезапустить
            </button>
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; padding: 5px;"
                onclick="MenuRestart();">
                Меню
            </button>
        </div>

        <!-- Main menu -->
        <div id="mainMenuRu"
            style="position:absolute; color: white;  align-items:center; justify-content: center;display:flex; width: 612px; height:300px; top: 100; left:200; right:0;bottom: 0; ">
            <div style="display:flex; flex-direction:column; padding:15px;">
                <h1 style="color: white; align-items:center; justify-content: center;">
                    Бойцовский клуб-игра-приложение
                </h1>
                <h2 style=" color: white; height: 50px; text-align:center;">
                    Меню
                </h2>
                <button
                    style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;"
                    onclick="HeroList();">
                    Начать игру
                </button>
                <button onclick="Settings();"
                    style="color: black; height: 25px;  cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;">
                    Настройки
                </button>
                <button
                    style=" color: black; height: 25px;  cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;"
                    onclick="TrueAbout();">
                    Как играть
                </button>
                <button
                    style=" color: black; height: 25px;  cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;"
                    onclick="TrueExit();">
                    Выйти
                </button>
            </div>

        </div>
        <!-- Settings page -->

        <div id="settingsRu"
            style="position:absolute; color: white;  align-items:center; justify-content: center;display:none; flex-direction:column; width: 612px; height:400px; top: 100; left:200; right:0;bottom: 0; ">
            <h1 style="color: white; align-items:center; justify-content: center;">
                Настройки
            </h1>
            <p>Аудио настройки:</p>
            <div style="display:flex; flex-direction:column;">
                <label for="volume">Музыка из меню</label>
                <input type="range" id="volume" value="volume" step="0.01" name="audio" min="0" max="1"
                    onchange="rangeValue();"">
            <div id='result'
            aria-valuenow=" volume" style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
                text-align:center;">
                0.5
            </div>
            <hr />
            <label for=" volumeFight">Звуки атаки и получения урона</label>
            <input type="range" id="volumeFight" value="volumeFight" step="0.01" name="audio" min="0" max="1"
                onchange="rangeValueFight();"">
        <div id='resultFight'
            style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
                text-align:center;">
            0.5
        </div>
        <hr />
        <label for=" volumeDeath">Звук смерти</label>
        <input type="range" id="volumeDeath" value="volumeDeath" step="0.01" name="audio" min="0" max="1"
            onchange="rangeValueDeath();"">
    <div id='resultDeath'
        style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
            text-align:center;">
        0.5
    </div>
    <hr />
    <label for="volumeMove">Звук перемещения</label>
    <input type="range" id="volumeMove" value="volumeMove" step="0.01" name="audio" min="0" max="1"
        onchange="rangeValueMove();"">
        <div id='resultMove'
            style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
        text-align:center;">
    0.5
    </div>
    <hr />
    <button onclick="ChangeLanguageToEng();" style="cursor: pointer;">
        Изменить на Анг.
    </button>
    </div>
    <button id="back"
        style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px;display:flex; padding: 5px; align-items:center; justify-content: center; grid-column: span 3 / span 3; margin: 15px; margin-top:50px;"
        onclick="TrueBack();">
        Назад
    </button>
    </div>

    <!-- How to play page -->
    <div id="howToPlayRu"
        style="position:absolute; color: white;  align-items:center; justify-content: center;display:none; width:612px; height:500px; top: 0; left:200; right:0;bottom: 0; grid-template-rows: repeat(3, minmax(0, 1fr)); grid-template-columns: repeat(2, minmax(0, 1fr)); margin-top:50px;">
        <h2
            style="text-align:center;color: white; align-items:center; justify-content: center; grid-column: span 3 / span 3;  margin-bottom:200px;">
            Как играть
        </h2>
        <div
            style="background-color: rgba(255, 255 ,255, 0.65); border:1px solid black; border-radius: 15px; padding:15px; color:black; margin-right:5px;">
            <div style="display:grid; grid-template-columns: repeat(2, minmax(0, 1fr)); width:100%;">
                <h3
                    style="color: black; align-items:center; justify-content: center;text-align:center; grid-column: span 3 / span 3;">
                    Игрок 1
                </h3>
                <div
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        A кнопка
                    </div>
                    <div style="padding:5px;">
                        W кнопка
                    </div>
                    <div style="padding:5px;">
                        D кнопка
                    </div>
                    <div style="padding:5px;">
                        Пробел кнопка
                    </div>
                    <div style="padding:5px;">
                        C кнопка
                    </div>
                    <div style="padding:5px;">
                        R кнопка
                    </div>
                </div>
                <div
                    style="display:grid; grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        Движение налево
                    </div>
                    <div style="padding:5px;">
                        Прыжок
                    </div>
                    <div style="padding:5px;">
                        Движение направо
                    </div>
                    <div style="padding:5px;">
                        Легкая атака (-20)
                    </div>
                    <div style="padding:5px;">
                        Средняя атака (-25)
                    </div>
                    <div style="padding:5px;">
                        Тяжелая атака (-35)
                    </div>
                </div>
            </div>
        </div>
        <div
            style="background-color: rgba(255, 255 ,255, 0.65); border:1px solid black; border-radius: 15px; padding:15px; color:black;  margin-left:5px;">
            <div style="display:grid; grid-template-columns: repeat(2, minmax(0, 1fr)); width:100%;">
                <h3
                    style="color: black; align-items:center; justify-content: center;text-align:center; grid-column: span 3 / span 3;">
                    Игрок 2
                </h3>
                <div
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        Стрелка влево
                    </div>
                    <div style="padding:5px;">
                        Стрелка вверх
                    </div>
                    <div style="padding:5px;">
                        Стрелка вправо
                    </div>
                    <div style="padding:5px;">
                        Стрелка вниз
                    </div>
                    <div style="padding:5px;">
                        2 кнопка (Num Lock)
                    </div>
                    <div style="padding:5px;">
                        3 кнопка (Num Lock)
                    </div>
                </div>
                <div
                    style="display:grid; grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        Движение налево
                    </div>
                    <div style="padding:5px;">
                        Вверх
                    </div>
                    <div style="padding:5px;">
                        Движение направо
                    </div>
                    <div style="padding:5px;">
                        Легкая атака (-20)
                    </div>
                    <div style="padding:5px;">
                        Средняя атака (-25 )
                    </div>
                    <div style="padding:5px;">
                        Тяжелая атака (-35)
                    </div>
                </div>
            </div>
        </div>

        <button id="back"
            style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px;display:flex; padding: 5px; align-items:center; justify-content: center; grid-column: span 3 / span 3; margin: 15px; margin-top:200px;"
            onclick="TrueBack();">
            Назад
        </button>
    </div>
    </div>
    <div style="display: flex;" id="displayEng">
        <!-- interface of healthbar both players -->
        <div style="position:relative; display:inline-block;" id="app" class="">
            <!-- info about players healthbar and timer-->
            <div id="infoPlayers"
                style="position:absolute; display:none; flex-direction:row; width:100%; align-items:center; padding:50px;">

                <!-- player health -->
                <div style="position: relative; height:30px; width:100%;display:flex;">
                    <div style="position: absolute; color: white; height: 50px; bottom:40; left: 0; ">
                        <h1>

                            Player 1
                        </h1>
                    </div>
                    <div style="position: relative; height:30px; width:100%;display:flex; justify-content:flex-end;">
                        <div
                            style="background-color:red; text-align:center;height:30px; width: 100%; border: 2px solid white; border-radius: 15px;">
                            Player 1
                        </div>
                        <div id="playerHealth"
                            style="position: absolute; background-color:blue; top:0; right: 0; bottom: 0; width: 100%; border: 2px solid white; border-radius: 15px;">
                        </div>
                    </div>
                </div>

                <!-- timer -->
                <div
                    style="background-color:white; text-align:center; width:100px; flex-shrink: 0;text-align:center; display: flex; align-items:center; justify-content: center; border: 2px solid white; border-radius: 15px; ">
                    <!-- <h3>
                    Timer:
                </h3> -->
                    <br />
                    <h3 id="timer">
                    </h3>
                </div>

                <!-- player2 health -->
                <div style="position: relative; height:30px; width:100%;display:flex; ">
                    <div style="position: absolute; color: white; height: 50px; bottom:40; right: 0; ">
                        <h1>
                            Player 2
                        </h1>
                    </div>
                    <div style="position: relative; height:30px; width:100%;">
                        <div
                            style="background-color:red; text-align:center;height:30px; border: 2px solid white; border-radius: 15px;">
                            Player 2
                        </div>
                        <div id="player2Health"
                            style=" position: absolute; background-color:blue; top:0; right: 0; bottom: 0; left: 0; border: 2px solid white; border-radius: 15px;">
                        </div>
                    </div>
                </div>

            </div>

            <!-- Win label or lose label -->
            <h1 id="displayText"
                style="position:absolute; color: white; width:100%; align-items:center; justify-content: center; top: 0; left:0; right:0;bottom: 100; display:none; ">
            </h1>

            <canvas></canvas>
        </div>

        <!-- menu with pucking heroes -->
        <div id="pickMenu"
            style=" position:absolute; color: black;  align-items:center; justify-content: center;display:none; flex-direction:column;width:768px; height:600px; top: 0; left:100; right:0;bottom: 0; margin-top:0px;">

            <div
                style="display:grid; grid-template-columns: repeat(2, minmax(0, 1fr)); width:100%; background-color:white; border-radius:15px; padding:5px;">
                <div id="parentColumnOne"
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr)); align-items:center; justify-content: center;text-align:center; margin-right:5px;">
                    <p style="font-size:small;">

                        Player 1
                    </p>
                    <!-- Hero list -->
                    <div class="focus-div" id="hero1Player1" onclick="PickMackPlayer1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Mack</p>
                        <img src="/assets/samuraiMack/singleMack.png" alt="hero1" style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKingPlayer1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">King</p>
                        <img src="/assets/Medieval King Pack/singleKing.png" alt="hero2"
                            style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKenjiPlayer1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">Kenji</p>
                        <img src="/assets/kenji/singleKenjiReverse.png" alt="hero3" style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKing2Player1();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">King - 2 </p>
                        <img src="/assets/Medieval King Pack 2/Sprites/King2 solo.png" alt="hero4"
                            style="width: 48px; height:48px;" />
                    </div>
                </div>
                <div
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr)); align-items:center; justify-content: center;text-align:center; margin-left:5px;">
                    <p style="font-size:small;">
                        Player 2
                    </p>
                    <!-- Hero list -->
                    <div onclick="PickMackPlayer2();" id="hero1Player2"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;"> Mack</p>
                        <img src="/assets/samuraiMack/reverseMack/singleMackReverse.png" alt="hero1"
                            style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKingPlayer2();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">King</p>
                        <img src="/assets/Medieval King Pack/singleKingReverse.png" alt="hero2"
                            style="width: 48px; height:48px;" />
                    </div>
                    <div id="hero1Player2" onclick="PickKenjiPlayer2();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;"> Kenji</p>
                        <img src="/assets/kenji/singleKenji.png" alt="hero1" style="width: 48px; height:48px;" />
                    </div>
                    <div onclick="PickKing2Player2();"
                        style="cursor: pointer; border:1px solid black; border-radius:15px;">
                        <p style="font-size:small;">King - 2</p>
                        <img src="/assets/Medieval King Pack 2/Sprites/King2 solo Reverse.png" alt="hero4"
                            style="width: 48px; height:48px;" />
                    </div>
                </div>
            </div>
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px;  grid-column: span 3 / span 3;"
                onclick="TrueStart();">
                Play
            </button>
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; padding: 5px; align-items:center; justify-content: center; grid-column: span 3 / span 3; "
                onclick="TrueBack();">
                Back
            </button>

        </div>



        <!-- restart button -->
        <div id="restart"
            style="position:absolute; color: white;  align-items:center; justify-content: center; display:none; width: 610px; height:300px; top: 200; left:200; right:0;bottom: 0; ">
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; padding: 5px;"
                onclick="TrueRestart();">
                Restart
            </button>
            <button
                style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; padding: 5px;"
                onclick="MenuRestart();">
                Menu
            </button>
        </div>

        <!-- Main menu -->
        <div id="mainMenu"
            style="position:absolute; color: white;  align-items:center; justify-content: center;display:flex; width: 612px; height:300px; top: 100; left:200; right:0;bottom: 0; ">
            <div style="display:flex; flex-direction:column; padding:15px;">
                <h1 style="color: white; align-items:center; justify-content: center;">
                    Fighting club-game-app
                </h1>
                <h2 style=" color: white; height: 50px; text-align:center;">
                    Menu
                </h2>
                <button
                    style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;"
                    onclick="HeroList();">
                    Start game
                </button>
                <button onclick="Settings();"
                    style="color: black; height: 25px;  cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;">
                    Settings
                </button>
                <button
                    style=" color: black; height: 25px;  cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;"
                    onclick="TrueAbout();">
                    How to play
                </button>
                <button
                    style=" color: black; height: 25px;  cursor:pointer; border:1px solid black; border-radius: 15px; margin:2px;"
                    onclick="TrueExit();">
                    Exit
                </button>
            </div>

        </div>
        <!-- Settings page -->

        <div id="settings"
            style="position:absolute; color: white;  align-items:center; justify-content: center;display:none; flex-direction:column; width: 612px; height:400px; top: 100; left:200; right:0;bottom: 0; ">
            <h1 style="color: white; align-items:center; justify-content: center;">
                Settings
            </h1>
            <p>Audio settings:</p>
            <div style="display:flex; flex-direction:column;">
                <label for="volume">Menu music</label>
                <input type="range" id="volume" value="volume" step="0.01" name="audio" min="0" max="1"
                    onchange="rangeValue();"">
            <div id='result'
            aria-valuenow=" volume" style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
                text-align:center;">
                0.5
            </div>
            <hr />
            <label for=" volumeFight">Attack sound and damaged sound</label>
            <input type="range" id="volumeFight" value="volumeFight" step="0.01" name="audio" min="0" max="1"
                onchange="rangeValueFight();"">
        <div id='resultFight'
            style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
                text-align:center;">
            0.5
        </div>
        <hr />
        <label for=" volumeDeath">Death sound</label>
        <input type="range" id="volumeDeath" value="volumeDeath" step="0.01" name="audio" min="0" max="1"
            onchange="rangeValueDeath();"">
    <div id='resultDeath'
        style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
            text-align:center;">
        0.5
    </div>
    <hr />
    <label for="volumeMove">Move sound</label>
    <input type="range" id="volumeMove" value="volumeMove" step="0.01" name="audio" min="0" max="1"
        onchange="rangeValueMove();"">
        <div id='resultMove'
            style=" padding:8px; border: 1px solid black; border-radius: 15px; margin: 2px;max-height:30px;
        text-align:center;">
    0.5
    </div>
    <hr />
    <button onclick="ChangeLanguageToRu();" style="cursor: pointer;">
        Change to Ru
    </button>
    </div>
    <button id="back"
        style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px;display:flex; padding: 5px; align-items:center; justify-content: center; grid-column: span 3 / span 3; margin: 15px; margin-top:50px;"
        onclick="TrueBack();">
        Back
    </button>
    </div>

    <!-- How to play page -->
    <div id="howToPlay"
        style="position:absolute; color: white;  align-items:center; justify-content: center;display:none; width:612px; height:500px; top: 0; left:200; right:0;bottom: 0; grid-template-rows: repeat(3, minmax(0, 1fr)); grid-template-columns: repeat(2, minmax(0, 1fr)); margin-top:50px;">
        <h2
            style="text-align:center;color: white; align-items:center; justify-content: center; grid-column: span 3 / span 3;  margin-bottom:200px;">
            How to play
        </h2>
        <div
            style="background-color: rgba(255, 255 ,255, 0.65); border:1px solid black; border-radius: 15px; padding:15px; color:black; margin-right:5px;">
            <div style="display:grid; grid-template-columns: repeat(2, minmax(0, 1fr)); width:100%;">
                <h3
                    style="color: black; align-items:center; justify-content: center;text-align:center; grid-column: span 3 / span 3;">
                    Player 1
                </h3>
                <div
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        A button
                    </div>
                    <div style="padding:5px;">
                        W button
                    </div>
                    <div style="padding:5px;">
                        D button
                    </div>
                    <div style="padding:5px;">
                        Space button
                    </div>
                    <div style="padding:5px;">
                        C button
                    </div>
                    <div style="padding:5px;">
                        R button
                    </div>
                </div>
                <div
                    style="display:grid; grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        Move to the left
                    </div>
                    <div style="padding:5px;">
                        Jump
                    </div>
                    <div style="padding:5px;">
                        Move to the right
                    </div>
                    <div style="padding:5px;">
                        Light attack (-20)
                    </div>
                    <div style="padding:5px;">
                        Middle attack (-25)
                    </div>
                    <div style="padding:5px;">
                        Hard attack (-35)
                    </div>
                </div>
            </div>
        </div>
        <div
            style="background-color: rgba(255, 255 ,255, 0.65); border:1px solid black; border-radius: 15px; padding:15px; color:black;  margin-left:5px;">
            <div style="display:grid; grid-template-columns: repeat(2, minmax(0, 1fr)); width:100%;">
                <h3
                    style="color: black; align-items:center; justify-content: center;text-align:center; grid-column: span 3 / span 3;">
                    Player 2
                </h3>
                <div
                    style="display:grid;grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        Arrow left
                    </div>
                    <div style="padding:5px;">
                        Arrow up
                    </div>
                    <div style="padding:5px;">
                        Arrow right
                    </div>
                    <div style="padding:5px;">
                        Arrow down
                    </div>
                    <div style="padding:5px;">
                        2 button
                    </div>
                    <div style="padding:5px;">
                        3 button
                    </div>
                </div>
                <div
                    style="display:grid; grid-template-rows: repeat(5, minmax(0, 1fr)); grid-template-columns: repeat(1, minmax(0, 1fr));">
                    <div style="padding:5px;">
                        Move to the left
                    </div>
                    <div style="padding:5px;">
                        Jump
                    </div>
                    <div style="padding:5px;">
                        Move to the right
                    </div>
                    <div style="padding:5px;">
                        Light attack (-20)
                    </div>
                    <div style="padding:5px;">
                        Middle attack (-25 )
                    </div>
                    <div style="padding:5px;">
                        Hard attack (-35)
                    </div>
                </div>
            </div>
        </div>

        <button id="back"
            style="color: black; height: 25px; cursor:pointer; border:1px solid black; border-radius: 15px;display:flex; padding: 5px; align-items:center; justify-content: center; grid-column: span 3 / span 3; margin: 15px; margin-top:200px;"
            onclick="TrueBack();">
            Back
        </button>
    </div>
    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"
        integrity="sha512-6+YN/9o9BWrk6wSfGxQGpt3EUK6XeHi6yeHV+TYD2GR0Sj/cggRpXr1BrAQf0as6XslxomMUxXp2vIl+fv0QRA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.10.4/gsap.min.js"
        integrity="sha512-VEBjfxWUOyzl0bAwh4gdLEaQyDYPvLrZql3pw1ifgb6fhEvZl9iDDehwHZ+dsMzA0Jfww8Xt7COSZuJ/slxc4Q=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="/js/menu.js"> </script>
    <script src="/js/utils.js"> </script>
    <script src="/js/audio.js"></script>
    <script src="/js/classes.js"> </script>
    <script src="/index.js"> </script>
</body>

</html>

// 1) A finite set of states of the game. In our game, each state would represent a certain configuration of the grid.
// 2) A finite set of players which are the agents playing the game. In Fihgting game there’s only two players: the human player and the AI.
// 3) A finite set of actions that the players can do. Here, there's several actions that need to describe:
//  a.Define move to left AI;
//  b.Define move to right AI;
//  c.Define jump to AI;
//  d.Define attack1 to AI;
//  e.Define attack2 to AI;
// 4) A transition function that takes the current state and the played action and returns the next state in the game.
// 5) A terminal test function that checks if a state is terminal (that is if the game ends at this state).
// 6) A score function that calculates the score of the player at a terminal state

// new function which listen collision between two boxes (rectangular) or sprites
function rectangularCollision({ rectangle1, rectangle2 }) {
  return (
    rectangle1.attackBox.position.x + rectangle1.attackBox.width >=
      rectangle2.position.x &&
    rectangle1.attackBox.position.x <=
      rectangle2.position.x + rectangle2.width &&
    rectangle1.attackBox.position.y + rectangle1.attackBox.height >=
      rectangle2.position.y &&
    rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height
  );
}

function determineWinner({ pl1, pl2, timerId }) {
  clearTimeout(timerId);
  document.querySelector('#displayText').style.display = 'flex';
  // console.log(pl1.health);
  if (pl1.health === pl2.health) {
    document.querySelector('#displayText').innerHTML = 'Ничья';
    document.querySelector('#restart').style.display = 'flex';
    // console.log('Tie');
  } else if (pl1.health > pl2.health) {
    document.querySelector('#displayText').innerHTML = 'Игрок 1 выиграл!!!';
    document.querySelector('#restart').style.display = 'flex';
    // console.log('Player 1 Win!!!');
  } else if (pl1.health < pl2.health) {
    document.querySelector('#displayText').innerHTML = 'Игрок 2 выиграл!!!';
    document.querySelector('#restart').style.display = 'flex';
    // console.log('Player 2 Win!!!');
  }
}

// timer for round
let timer = 30;
// let currTime = timer > 0 ? timer-- : 0;
let timerId;
function decreaseTimer() {
  // console.log(timer);
  timerId = setTimeout(decreaseTimer, 1000);
  if (timer > 0) {
    timer--;
    document.querySelector('#timer').innerHTML = timer;
  }
  if (timer === 0) {
    // when where is if's statements equals to true so
    // apply this querySelector with style flex
    // Player Mack
    // Player Mack
    if (
      player.start === true &&
      player2.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player.start === true &&
      playerReverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player;
      let pl2 = playerReverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player.start === true &&
      player4Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    }
    // PlayerReverse Mack
    if (
      playerReverse.start === true &&
      player2.start === true &&
      menuMain.start === false
    ) {
      let pl1 = playerReverse;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      playerReverse.start === true &&
      player3.start === true &&
      menuMain.start === false
    ) {
      let pl1 = playerReverse;
      let pl2 = player3;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player2Reverse.start === true &&
      playerReverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = playerReverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      playerReverse.start === true &&
      player4.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = playerReverse;
      determineWinner({ pl1, pl2, timerId });
    }
    // Player2
    else if (
      player2.start === true &&
      player.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player2.start === true &&
      player3.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player3;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player2Reverse.start === true &&
      player2.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4.start === true &&
      player2.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    }
    // Player2 Reverse
    else if (
      player2Reverse.start === true &&
      playerReverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = playerReverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player2Reverse.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player2Reverse.start === true &&
      player2.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player2Reverse.start === true &&
      player4Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    }
    // Player3
    else if (
      player3.start === true &&
      playerReverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player3;
      let pl2 = playerReverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player3.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player3;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player3.start === true &&
      player2.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player3;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player3.start === true &&
      player4Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player3;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    }
    // Player3Reverse
    else if (
      player3.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player3;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player2Reverse.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    }
    // Player4
    else if (
      player4.start === true &&
      playerReverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = playerReverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4.start === true &&
      player3Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = player3Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4.start === true &&
      player2.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = player2;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4.start === true &&
      player4Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    }
    // Player4Reverse
    else if (
      player4Reverse.start === true &&
      player.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4Reverse.start === true &&
      player3.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player3;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4Reverse.start === true &&
      player2Reverse.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player2Reverse;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    } else if (
      player4Reverse.start === true &&
      player4.start === true &&
      menuMain.start === false
    ) {
      let pl1 = player4;
      let pl2 = player4Reverse;
      determineWinner({ pl1, pl2, timerId });
    }
  }
}

// Determine winner by less then zero health point
function DetermineWinnerByLessThenZeroHP() {
  // Player Mack
  if (
    player.start === true &&
    player2.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player;
    let pl2 = player2;
    if (player.health <= 0 || player2.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player;
    let pl2 = player3Reverse;
    if (player.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player.start === true &&
    playerReverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player;
    let pl2 = playerReverse;
    if (player.health <= 0 || playerReverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player.start === true &&
    player4Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player;
    let pl2 = player4Reverse;
    if (player.health <= 0 || player4Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
  // PlayerReverse Mack
  if (
    playerReverse.start === true &&
    player2.start === true &&
    menuMain.start === false
  ) {
    let pl1 = playerReverse;
    let pl2 = player2;
    if (playerReverse.health <= 0 || player2.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    playerReverse.start === true &&
    player3.start === true &&
    menuMain.start === false
  ) {
    let pl1 = playerReverse;
    let pl2 = player3;
    if (playerReverse.health <= 0 || player3.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player2Reverse.start === true &&
    playerReverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = playerReverse;
    if (player2Reverse.health <= 0 || playerReverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    playerReverse.start === true &&
    player4.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = playerReverse;
    if (player4.health <= 0 || playerReverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
  // Player2
  else if (
    player2.start === true &&
    player.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player;
    let pl2 = player2;
    if (player2.health <= 0 || player.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player2.start === true &&
    player3.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player3;
    let pl2 = player2;
    if (player2.health <= 0 || player3.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player2Reverse.start === true &&
    player2.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = player2;
    if (player2Reverse.health <= 0 || player2.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4.start === true &&
    player2.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = player2;
    if (player4.health <= 0 || player2.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
  // Player2 Reverse
  else if (
    player2Reverse.start === true &&
    playerReverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = playerReverse;
    if (player2Reverse.health <= 0 || playerReverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player2Reverse.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = player3Reverse;
    if (player2Reverse.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player2Reverse.start === true &&
    player2.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = player2;
    if (player2Reverse.health <= 0 || player2.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player2Reverse.start === true &&
    player4Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = player4Reverse;
    if (player2Reverse.health <= 0 || player4Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
  // Player3
  else if (
    player3.start === true &&
    playerReverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player3;
    let pl2 = playerReverse;
    if (player3.health <= 0 || playerReverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player3.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player3;
    let pl2 = player3Reverse;
    if (player3.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player3.start === true &&
    player2.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player3;
    let pl2 = player2;
    if (player3.health <= 0 || player2.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player3.start === true &&
    player4Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player3;
    let pl2 = player4Reverse;
    if (player3.health <= 0 || player4Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
  // Player3Reverse
  else if (
    player3.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player3;
    let pl2 = player3Reverse;
    if (player3.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player;
    let pl2 = player3Reverse;
    if (player.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player2Reverse.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = player3Reverse;
    if (player2Reverse.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = player3Reverse;
    if (player4.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
  // Player4
  else if (
    player4.start === true &&
    playerReverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = playerReverse;
    if (player4.health <= 0 || playerReverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4.start === true &&
    player3Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = player3Reverse;
    if (player4.health <= 0 || player3Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4.start === true &&
    player2.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = player2;
    if (player4.health <= 0 || player2.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4.start === true &&
    player4Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = player4Reverse;
    if (player4.health <= 0 || player4Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
  // Player4Reverse
  else if (
    player4Reverse.start === true &&
    player.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player;
    let pl2 = player4Reverse;
    if (player4Reverse.health <= 0 || player.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4Reverse.start === true &&
    player3.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player3;
    let pl2 = player4Reverse;
    if (player4Reverse.health <= 0 || player3.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4Reverse.start === true &&
    player2Reverse.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player2Reverse;
    let pl2 = player4Reverse;
    if (player4Reverse.health <= 0 || player2Reverse.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  } else if (
    player4Reverse.start === true &&
    player4.start === true &&
    menuMain.start === false
  ) {
    let pl1 = player4;
    let pl2 = player4Reverse;
    if (player4Reverse.health <= 0 || player4.health <= 0) {
      determineWinner({ pl1, pl2, timerId });
    }
  }
}

// concept 1 changing sprites with shifting past sprite and pushing new with the same players 1 and player 2 !== work
// concept 2 create additional players and sets them individual characteristics but idk how to determine winner with multiple sets  and settings
// concept 3

const sprites = [
  {
    idle: {
      imageSrc: './assets/samuraiMack/Idle.png',
      framesMax: 8,
    },
    run: {
      imageSrc: './assets/samuraiMack/Run.png',
      soundSrc: './audio/walking.wav',
      framesMax: 8,
    },
    jump: {
      imageSrc: './assets/samuraiMack/Jump.png',
      soundSrc: './audio/jump.mp3',
      framesMax: 2,
    },
    fall: {
      imageSrc: './assets/samuraiMack/Fall.png',
      framesMax: 2,
    },
    attack1: {
      imageSrc: './assets/samuraiMack/Attack1.png',
      soundSrc: './audio/swing.wav',
      framesMax: 6,
    },
    attack2: {
      imageSrc: './assets/samuraiMack/Attack2.png',
      framesMax: 6,
    },
    damaged: {
      imageSrc: './assets/samuraiMack/Take Hit - white silhouette.png',
      soundSrc: './audio/mixkit-sword-cutting-flesh-2788.wav',
      framesMax: 4,
    },
    death: {
      imageSrc: './assets/samuraiMack/Death.png',
      soundSrc: './audio/death 2.wav',
      framesMax: 6,
    },
    deathTwo: {
      imageSrc: './assets/kenji/blood/Death - blood - last 2.png',
      framesMax: 3,
    },
  },
];
function WithoutBlood() {
  player.sprites.shift();
  player.sprites.push(sprites[0]);
}
// picking hero from hero list
function HeroList() {
  // const div = document.createElement('div');
  // const mapArray = array.map((arrItem) => arrItem);
  // div.innerHTML = JSON.stringify(mapArray);
  // player.sprites.push(mapArray);
  // var parent = document.getElementById('parentColumnOne');
  // parent.append(div); // or: parent.appendChild(h1)
  if (language === 'ru') {
    document.querySelector('#pickMenuRu').style.display = 'flex';
    document.querySelector('#mainMenuRu').style.display = 'none';
  } else if (language === 'eng') {
    document.querySelector('#pickMenu').style.display = 'flex';
    document.querySelector('#mainMenu').style.display = 'none';
  }
}

function PickMackPlayer1() {
  // const hero1 = document.getElementById('hero1Player1');
  // player.sprites.shift();
  // // sprites.map((arrItem) => {
  // //   let hero1 = arrItem;
  // //   // console.log(hero1);
  // // });
  // player.sprites.push(sprites[0]);
  // console.log(player.sprites);
  player.playableHero = true;
  player.AIHero = false;
  player.start = true;
}
function PickMackPlayer2() {
  playerReverse.start = true;
}
function PickKingPlayer1() {
  player3.start = true;
}
function PickKingPlayer2() {
  player3Reverse.start = true;
}
// console.log(sprites[0]);
function PickKenjiPlayer2() {
  player2.start = true;
}
// Playing Kenji on left side like reverse for default side (right)
function PickKenjiPlayer1() {
  player2Reverse.start = true;
}
// Player4 like King 2
function PickKing2Player1() {
  player4.start = true;
}
function PickKing2Player2() {
  player4Reverse.start = true;
}

function TrueStart() {
  // home();
  // player.start = true;
  // player2.start = true;
  if (language === 'ru') {
    menuMain.start = false;
    document.querySelector('#infoPlayersRu').style.display = 'flex';
    document.querySelector('#pickMenuRu').style.display = 'none';
    decreaseTimer();
  } else if (language === 'eng') {
    menuMain.start = false;
    document.querySelector('#infoPlayers').style.display = 'flex';
    document.querySelector('#pickMenu').style.display = 'none';
    decreaseTimer();
  }
  // console.log('Click start', player3.start, player2.start);
  // console.log(player.sprites, player2.sprites);
}

// function restart when round ends
function TrueRestart() {
  player.health = 100;
  player3.health = 100;
  player2Reverse.health = 100;
  player4.health = 100;
  gsap.to('#playerHealth', {
    width: player.health + '%',
  });
  gsap.to('#playerHealth', {
    width: player3.health + '%',
  });
  gsap.to('#playerHealth', {
    width: player2Reverse.health + '%',
  });
  gsap.to('#playerHealth', {
    width: player4.health + '%',
  });

  playerReverse.health = 100;
  player2.health = 100;
  player3Reverse.health = 100;
  player4Reverse.health = 100;

  gsap.to('#player2Health', {
    width: player2.health + '%',
  });
  gsap.to('#player2Health', {
    width: player3Reverse.health + '%',
  });
  gsap.to('#player2Health', {
    width: playerReverse.health + '%',
  });
  gsap.to('#player2Health', {
    width: player4Reverse.health + '%',
  });

  if (
    player.restart === false ||
    playerReverse.restart === false ||
    player2.restart === false ||
    player2Reverse.restart === false ||
    player3.restart === false ||
    player3Reverse.restart === false ||
    player4.restart === false ||
    player4Reverse.restart === false
  ) {
    // restart set to true
    player.restart = true;
    playerReverse.restart = true;
    player2.restart = true;
    player2Reverse.restart = true;
    player3.restart = true;
    player3Reverse.restart = true;
    player4.restart = true;
    player4Reverse.restart = true;
    // position x like in the start of round(game)
    player.position.x = 256;
    playerReverse.position.x = 768;
    player2.position.x = 768;
    player2Reverse.position.x = 256;
    player3.position.x = 256;
    player3Reverse.position.x = 768;
    player4.position.x = 256;
    player4Reverse.position.x = 768;
    setTimeout(() => {
      player.restart = false;
      playerReverse.restart = false;
      player2.restart = false;
      player2Reverse.restart = false;
      player3.restart = false;
      player3Reverse.restart = false;
      player4.restart = false;
      player4Reverse.restart = false;
    }, 1000);
  }

  console.log(player2.dead);
  document.querySelector('#infoPlayers').style.display = 'flex';
  document.querySelector('#displayText').innerHTML = '';
  document.querySelector('#mainMenu').style.display = 'none';
  document.querySelector('#restart').style.display = 'none';
  let diff = 30 - timer;
  // console.log(diff);
  document.querySelector('#timer').innerHTML =
    timer < 30 ? (timer += diff) : null;
  decreaseTimer();
  console.log('Click restart', player.start, player2.start);
}
// function back which just hides some menu features
function TrueBack() {
  if (language === 'ru') {
    document.querySelector('#mainMenuRu').style.display = 'flex';
    document.querySelector('#pickMenuRu').style.display = 'none';
    document.querySelector('#settingsRu').style.display = 'none';
    document.querySelector('#howToPlayRu').style.display = 'none';
    document.querySelector('#restartRu').style.display = 'none';
  } else if (language === 'eng') {
    document.querySelector('#mainMenu').style.display = 'flex';
    document.querySelector('#pickMenu').style.display = 'none';
    document.querySelector('#settings').style.display = 'none';
    document.querySelector('#howToPlay').style.display = 'none';
    document.querySelector('#restart').style.display = 'none';
  }
}

// exist
function TrueExit() {
  let open = window.open('', '_self', '').close();
}
// about page from menu
function TrueAbout() {
  if (language === 'ru') {
    document.querySelector('#mainMenuRu').style.display = 'none';
    document.querySelector('#howToPlayRu').style.display = 'grid';
  } else if (language === 'eng') {
    document.querySelector('#mainMenu').style.display = 'none';
    document.querySelector('#howToPlay').style.display = 'grid';
  }
  // document.querySelector('#displayText').innerHTML = 'Игрок 1 выиграл!!!';
}

// settings function
function Settings() {
  if (language === 'ru') {
    document.querySelector('#mainMenuRu').style.display = 'none';
    document.querySelector('#settingsRu').style.display = 'flex';
  } else if (language === 'eng') {
    document.querySelector('#mainMenu').style.display = 'none';
    document.querySelector('#settings').style.display = 'flex';
  }
}

function ChangeLanguageToRu() {
  language = 'ru';
  document.querySelector('#displayEng').style.display = 'none';
  document.querySelector('#displayRu').style.display = 'flex';
}

function ChangeLanguageToEng() {
  language = 'eng';
  document.querySelector('#displayEng').style.display = 'flex';
  document.querySelector('#displayRu').style.display = 'none';
}

// changing volume menu music
let vol = document.querySelector('input[value="volume"]');
let volume = Number(vol.value);
const rangeValue = () => {
  const result = document.getElementById('result');
  const inputHandler = (e) => {
    volume = e.target.value;
    result.innerHTML = e.target.value;
  };
  console.log(`${volume} = volume`);
  vol.addEventListener('change', inputHandler); // for IE8
};

// changing volume fighting sounds
let volFight = document.querySelector('input[value="volumeFight"]');
let volumeFight = Number(volFight.value);
const rangeValueFight = () => {
  const resultFight = document.getElementById('resultFight');
  const inputHandler = (e) => {
    volumeFight = e.target.value;
    resultFight.innerHTML = e.target.value;
  };
  console.log(`${volumeFight} = volumeFight`);
  volFight.addEventListener('change', inputHandler); // for IE8
};

// changing volume death sounds
let volDeath = document.querySelector('input[value="volumeDeath"]');
let volumeDeath = Number(volDeath.value);
const rangeValueDeath = () => {
  const resultDeath = document.getElementById('resultDeath');
  const inputHandler = (e) => {
    volumeDeath = e.target.value;
    resultDeath.innerHTML = e.target.value;
  };
  console.log(`${volumeDeath} = volumeDeath`);
  volDeath.addEventListener('change', inputHandler); // for IE8
};

// changing volume walking | jump sounds
let volMove = document.querySelector('input[value="volumeMove"]');
let volumeMove = Number(volMove.value);

const rangeValueMove = () => {
  const resultMove = document.getElementById('resultMove');
  const inputHandler = (e) => {
    volumeMove = e.target.value;
    resultMove.innerHTML = e.target.value;
  };
  console.log(`${volumeMove} = volumeMove`);
  volMove.addEventListener('change', inputHandler); // for IE8
};
